[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to BI1001 Biostatistics Practicals",
    "section": "",
    "text": "This site contains all the practicals for the BI1001 Biostatistics module.\nClick on a practical below to get started:\n\n\n\nPractical 1 – Basics of R\nPractical 1 – Exploring data and graphing\nPractical 2 – Experimental design and subsampling data\nPractical 2 – Correlation analysis\nPractical 4 – Group comparisons\nPractical 5 – Analysing count data"
  },
  {
    "objectID": "index.html#practicals",
    "href": "index.html#practicals",
    "title": "Welcome to BI1001 Biostatistics Practicals",
    "section": "",
    "text": "Practical 1 – Basics of R\nPractical 1 – Exploring data and graphing\nPractical 2 – Experimental design and subsampling data\nPractical 2 – Correlation analysis\nPractical 4 – Group comparisons\nPractical 5 – Analysing count data"
  },
  {
    "objectID": "Practical 1 - Basics of R.html",
    "href": "Practical 1 - Basics of R.html",
    "title": "Practical 1 - Basics of R",
    "section": "",
    "text": "Learning Outcomes (LOs)\nHere’s what you should know and be able to do after completing this practical:\n\nLO1: Use R like a calculator (addition, subtraction, division, multiplication)\nLO2: Perform some basic functions (like the square root function)\nLO3: Create simple objects\nLO4: Create sequences and repeats of numbers\nLO5: Apply basic functions on objects\nLO6: Calculate some basic descriptive statistics\nLO7: Install and load packages in R\nLO8: Cite R and R packages\n\n\n\nTutorial\nYou should copy code in this tutorial and paste it into your script in R. Then, click on the line of code and then click “Run” in the top-right of your script pane (or press Ctrl+R or Ctrl+Enter)\n\nBasic calculations: Addition, subtraction, etc.\nR can be used just like a calculator\n\nSum:\n\n3+5\n\n[1] 8\n\n\n\n\nDivide:\n\n100/20\n\n[1] 5\n\n\n\n\nMinus:\n\n10-5\n\n[1] 5\n\n\n\n\nMultiply:\n\n10*2\n\n[1] 20\n\n\nNOTE: The usual rules of precedence apply (multiplication happens before addition):\n\n5+2*10\n\n[1] 25\n\n\nYou can use parentheses to make sure that specific code is run first:\n\n(5+2)*10\n\n[1] 70\n\n\nNOTE: You cannot use curly {} or square [] brackets for this (they have other functions)\n\n\nPower transformations\nR can be used to perform power transformations\nFor example, you can raise 10 to the power of 4 to get 10,000:\n\n10^4\n\n[1] 10000\n\n\nRaising 10 to the power of 4 is the same as doing 10x10x10x10\n\n\nSquare root\nIf you raise something to the power of 0.5, that is the same as taking the square root.\nRemember that a square root is just “the number that, when multiplied by itself, gives the original number.”\nFor example, the square root of 100 is 10, because when 10 is multiplied by itself you get 100:\n\nsqrt(100)\n\n[1] 10\n\n\nNOTE: Raising a number to the power of 0.5 does the same thing:\n\n100^0.5\n\n[1] 10\n\n\nThe sqrt() above is the first example of a function in R (more on this later)\n\n\nFractions\nR also understands fractions:\n\n1/3\n\n[1] 0.3333333\n\n\nStrictly speaking the above is 0.333 recurring\n\n1/5\n\n[1] 0.2\n\n\n\n1/8\n\n[1] 0.125\n\n\n\n\n\nThings that are already built into R\nR has lots of useful things built into it:\nThe 26 upper-case letters of the Roman alphabet letters:\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n\nThe 26 lower-case letters of the Roman alphabet:\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nThe three-letter abbreviations for the English month names:\n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\nThe English names for the months of the year:\n\nmonth.name\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n\nThe ratio of the circumference of a circle to its diameter:\n\npi\n\n[1] 3.141593\n\n\n\n\nTrigonometry\nR can do trigonometry!\nDon’t worry about the mathematics - I just want you to know what’s possible:\n\nsin(1)\n\n[1] 0.841471\n\ncos(1)\n\n[1] 0.5403023\n\ntan(1)\n\n[1] 1.557408\n\n\n\nInfinity\nR understands infinity (and minus infinity):\n\n1/0\n\n[1] Inf\n\n-1/0\n\n[1] -Inf\n\n\n\n\nUndefined numbers\nR also understands things that aren’t numbers.\nFor example if you divide zero by zero, you get “NaN” (“Not a Number”)\n\n0/0\n\n[1] NaN\n\n\n\n\n\nCreating objects\nCreating objects is probably the most important thing you’ll learn in R\nObjects can be anything you want them to be. Numbers, words, datasets, pictures, and more!\nWe can create “objects” by using the “assignment operator”: &lt;-\nFor example, create a new object called “data” which contains the numbers 1 to 5:\n\ndata &lt;- 1:5\n\nThis “data” object will now appear in your Environment (top-right)\nNow, if we simply type the name of that object and run it, we will see what it contains:\n\ndata\n\n[1] 1 2 3 4 5\n\n\nWe can also create objects that contain words.\nFor example, here’s a motivational phrase:\n\nphrase &lt;- \"Well done, you're doing great!\"\n\nAgain, we can type the name of that object and we’ll see that phrase:\n\nphrase\n\n[1] \"Well done, you're doing great!\"\n\n\nThis might seem a little abstract now, but soon you will be creating objects that consist of data that we plot and perform statistical analysis on!\n\n\n\n\n\n\nHave a go\n\n\n\n\n\nNow it’s your turn to have a go:\nWrite the code to create an object called “new” and put the numbers 1 to 10 in that object.\n\n\n\n\n\nUsing “functions”\nEqually as important as creating objects is being able to use functions\nFunctions are specific blocks of code that perform specific tasks\n\nSum function:\nFor example, let’s look at the sum() function, which simply sums things together:\n\nsum(3, 5)\n\n[1] 8\n\nsum(4, 4, 10)\n\n[1] 18\n\n\n\n\nConcatenate function:\nA very useful function in R is “concatenate”. This is written as c()\nThis function groups things together (that’s what “concatenate” means!)\nHere’s an example:\nLet’s say we wanted to group some numbers together\nNOTE: You can’t run just a list of numbers. You will get an error message:\n\n2, 4, 6, 8, 10\n\nYou also cannot do this even if the numbers are inside parentheses.\nYou will still get an error:\n\n(2, 4, 6, 8, 10)\n\nWe can only do this if we use the concatenate function: c()\nAnd you have to put the numbers inside parentheses, with each number separated by a comma\nGroup together some even numbers:\n\nc(2, 4, 6, 8, 10)\n\n[1]  2  4  6  8 10\n\n\nWe could store these numbers inside an object:\n\neven &lt;- c(2, 4, 6, 8, 10)\n\nWe can now perform mathematical calculations on these numbers:\n\n10*even\n\n[1]  20  40  60  80 100\n\neven^2\n\n[1]   4  16  36  64 100\n\n\nYou can also group words together and store these in an object:\n\nanimals &lt;- c(\"dog\", \"cat\", \"gull\", \"cow\")\n\nBut of course you can’t perform mathematical calculations on words!\nThe following will give you an error:\n\nanimals*10\n\n\n\n\n\n\n\nHave a go\n\n\n\n\n\nNow it’s your turn.\nWrite your own code to create an object called “names” and store inside that object your own name and the name of the person sitting next to you.\n\n\n\n\n\n\nDoing things with “objects”\nWhat you’ve just had a go at above is creating an object and then doing something with it. This is actually one of the most common things you’ll be doing in R. So, let’s have some more practice.\nCreate an object (called “obj”), which contains 4 numbers:\n\nobj &lt;- c(1, 5, 10, 100)\n\nNow we can do things like add 5 to all of the numbers in that object:\n\nobj+5\n\n[1]   6  10  15 105\n\n\nOr multiply them all by 10:\n\nobj*10\n\n[1]   10   50  100 1000\n\n\nLet’s create a different object, called “x1”.\nx1 will contain the letter A and some words:\n\nx1 &lt;- c(\"A\", \"mean\", \"mode\", \"variance\", \"statistics\")\n\n\n\nR is case-sensitive\nNOTE: R is “case-sensitive”\nThis means that you must be careful to use lower-case or upper-case correctly\nThis ALWAYS catches beginners out!\nFor example, now that you have created the “x1” object, if you type “X1”, it won’t work!\n\nX1\n\nThis tells you object ‘X1’ not found, because you didn’t create X1, you created x1\nIn exactly the same way, if you tried to run “Obj” that would give you an error too:\n\nObj\n\nBecause as far as R knows, nothing called “Obj” exists (only the lower case “obj”)\n\nStr() function\nWe can now perform the structure function str() on any object (“str” stands for “Structure”).\nThe structure function tells us about an object - in this case the x1 object is a “Character vector” (a list of characters i.e., words or symbols):\n\nstr(x1)\n\n chr [1:5] \"A\" \"mean\" \"mode\" \"variance\" \"statistics\"\n\n\nIt also tells us that this object contains 1 to 5 elements [1:5] and that specifically these elements are “A”, “mean”, “mode”, “variance”, and “statistics”.\n\n\n\nDifferent types of objects\nIn the “Introduction to R Coding” lecture you saw different types of objects we can create in R. Specifically, you saw Character, Factor, Integer, and Numeric objects.\nLet’s create an example of each.\n\nCharacter\nA character object just contains words or symbols:\n\nchr &lt;- c(\"students\", \"administrators\", \"teachers\")\nstr(chr)\n\n chr [1:3] \"students\" \"administrators\" \"teachers\"\n\n\n\n\nInteger\nAn integer is an object that contains only whole numbers:\n\nint &lt;- c(1, 2, 3, 4, 5)\nstr(int)\n\n num [1:5] 1 2 3 4 5\n\n\n\n\nNumeric\nA numeric object is a number that also contains decimal places:\n\nnum &lt;- c(1.1, 1.2, 1.3, 1.4, 1.5)\nstr(num)\n\n num [1:5] 1.1 1.2 1.3 1.4 1.5\n\n\n\n\nFactor\nNext we will create a factor. A factor is an object that can contain both words and numbers. However, the important thing to remember is that a factor object has categories.\nSo, we could create category1, category2, etc.\nImportantly, if the same thing appears multiple times in a factor, R will understand that this represents multiple observations from the same category.\nTo create a factor you need to use the function as.factor():\n\nfct &lt;- as.factor(c(\"category1\", \"category1\", \"category2\", \"category3\"))\nstr(fct)\n\n Factor w/ 3 levels \"category1\",\"category2\",..: 1 1 2 3\n\n\nNotice how the factor looks different to the character. R detects that there are 3 levels (categories).\nA factor recognises that there are specific categorical groups, whereas a character variable just treats each element as completely unique.\n\n\n\n\n\n\nHave a go\n\n\n\n\n\nNow you have a go.\nCreate a factor called “exp” which contains a “control” and “treatment” group.\n\n\n\n\n\n\nGenerating number sequences\nR can be used to generate sequences of numbers using the seq() function:\nLet’s sequence numbers from 0 to 10 in intervals of 1:\n\nseq1 &lt;- seq(0, 10, 1)\nseq1\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n\nOr sequence from 0 to 1000 in intervals of 50:\n\nseq2 &lt;- seq(0, 1000, 50)\nseq2\n\n [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700\n[16]  750  800  850  900  950 1000\n\n\n\n\nGenerate repeated sequences:\nWe can use the function rep() to generate repeated things:\nThis will repeat 4, 10 times:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nOr the letter A, 5 times:\n\nrep(\"A\", 5)\n\n[1] \"A\" \"A\" \"A\" \"A\" \"A\"\n\n\nRemember the character object we created earlier, called “chr”?\nWe could apply the rep() function to that object.\nFor example, ask R to repeat “chr” twice:\n\nrep(chr, 2)\n\n[1] \"students\"       \"administrators\" \"teachers\"       \"students\"      \n[5] \"administrators\" \"teachers\"      \n\n\n\n\nAsking R for help\nYou can ask R for help with a function by putting a question mark in front of the function:\n\n?rep\n\nstarting httpd help server ... done\n\n\nThis will bring up a help page that tells you about that function.\nThese pages can be a bit tricky to understand at first, but with practice you will learn how to interpret them.\nIf you scroll down to the very bottom of that help page you can see some “Examples” that demonstrate how the function can be used.\nFor the rep() function, a good way to use it is by stating each = X where X is the number of times you want each number to be repeated.\nFor example, let’s repeat the numbers 1, 2, 3 each 3 times:\n\nrep(c(1, 2, 3), each = 3)\n\n[1] 1 1 1 2 2 2 3 3 3\n\n\n\n\nArguments\nWhat you have just seen above (the use of “each” inside the rep() function) is an example of an “Argument”.\nArguments are the specific instructions we give to # different functions to specify exactly how those functions are to be used.\nThe rep() function can use the times argument instead of each. This will change how many times the thing that you specify is repeated.\nFor example, repeat “1, 2, 3” three times:\n\nrep(c(1, 2, 3), times = 3)\n\n[1] 1 2 3 1 2 3 1 2 3\n\n\nYou should be able to see how this is different to the previous example.\nCompare them:\n\nrep(c(1, 2, 3), each = 3)\n\n[1] 1 1 1 2 2 2 3 3 3\n\nrep(c(1, 2, 3), times = 3)\n\n[1] 1 2 3 1 2 3 1 2 3\n\n\n\n\nCalculating basic statistics\nR can very easily and quickly calculate basic descriptive statistics.\nLet’s create an object called “numbers” and then calculate some basic statistics:\n\nnumbers &lt;- c(1, 5, 10, 100, 200)\n\nUse the sum() function to add all the numbers together:\n\nsum(numbers)\n\n[1] 316\n\n\nThe min() function tells you the minimum number:\n\nmin(numbers)\n\n[1] 1\n\n\nmax() tells you the maximum number:\n\nmax(numbers)\n\n[1] 200\n\n\nrange() shows you both the minimum and maximum:\n\nrange(numbers)\n\n[1]   1 200\n\n\nmedian() shows you the middle number:\n\nmedian(numbers)\n\n[1] 10\n\n\nmean() calculates the mean value (add them all up and divide by how many there are):\n\nmean(numbers)\n\n[1] 63.2\n\n\nThe sd() function calculates the Standard Deviation (a measure of variability):\n\nsd(numbers)\n\n[1] 86.82569\n\n\nThe var() calculates the variance (this is another measure of variability)\n\nvar(numbers)\n\n[1] 7538.7\n\n\nIn fact, the variance is the standard deviation squared:\n\nsd(numbers)^2\n\n[1] 7538.7\n\n\n\n\nUsing one object to create another:\nWe can store results of our calculations in new objects.\nSo here, we apply the mean() function to the numbers object, and store the result of that in a new object called “avg”:\n\navg &lt;- mean(numbers)\navg\n\n[1] 63.2\n\n\n\n\nCalculating Standard Error of the Mean (SEM)\nCalculating a mean is something you will probably need to do quite a lot.\nIt’s important therefore to know that whenever we calculate a mean, what we are actually doing is estimating a value. Because this is an estimation, it will come with some error.\nWhen we calculate a mean we therefore must always also calculate how much error we have in our estimate. This is called the Standard Error of the Mean (SEM).\nIf we want to calculate the SEM, we can do it like this…\nFirst we can create a function:\n\nSEM &lt;- function(x) sd(x)/sqrt(length(x))\n\nNOTE: I’m not expecting you to be able to create your own functions - this is quite advanced!\nBut for anyone who is interested, all this line of code above does is tell R that we want to create a new function which we can apply to “x”.\n“x” in this case represents anything we choose to apply that function to.\nSpecifically, we want the function to calculate the standard deviation of x. Then, divide that by the square root of how many observations there are in x.\nNOTE: The length() function calculates how many elements there are in an object.\nLet’s quickly see length() in action in a simple example:\nIn our “numbers” object there are 5 numbers (1, 5, 10, 100 and 200).\nSo length will give us the answer 5.\n\nlength(numbers)\n\n[1] 5\n\n\nSo, in summary, what the Standard Error of the Mean (SEM) function does is calculates the standard deviation (the variability) of the data and then divides that by the square root of how many data points there are.\nIf you want to see that written mathematically, it’s:\n\\[\n\\text{SEM} = \\frac{s}{\\sqrt{n}}\n\\] We can apply the SEM function now to our numbers object.\nNOTE: We apply the SEM function to the raw data, not the estimated mean itself.\n\nSEM(numbers)\n\n[1] 38.82963\n\n\nThe SEM essentially represents how precise our estimated mean is.\nSo the mean of “numbers” could be reported as:\n63.2 ± 38.82963\nThe 38.82963 here represents how much error there is around our estimated mean value of 63.2.\n\n\nMissing observations (NA)\nWhenever you collect data in science, there’s a chance that you may not be able to collect all of the observations you had planned to.\nIn those cases, you are likely to have missing observations.\nFor example, imagine I wanted to measure the heights (cm) of 5 patients, but one of the patients didn’t turn up to the clinic. I would have one missing observation. That could look something like this:\n\nheights &lt;- c(165, 168, 174, NA, 170)\n\nWhen you have a missing value in your observations, R will not be able to calculate statistics from those numbers.\nFor example mean() will not give you a number, but rather NA:\n\nmean(heights)\n\n[1] NA\n\n\nThis is because you can’t calculate the mean of “165, 168, 174, NA, and 170”.\nIn order to calculate the mean of the numbers only, you must remove any missing observations; you must remove the NA.\nThe easiest way to do this is by using the “na.rm” argument.\nIn this example we set na.rm to “TRUE” to tell R to remove the NAs.\nNow it can calculate the number for us:\n\nmean(heights, na.rm = TRUE)\n\n[1] 169.25\n\n\nNOTE: This is also required for many of the other basic descriptive statistics calculations you did earlier. Here are a couple more examples:\n\nsd(heights)\n\n[1] NA\n\nsd(heights, na.rm = TRUE)\n\n[1] 3.774917\n\nmin(heights)\n\n[1] NA\n\nmin(heights, na.rm = TRUE)\n\n[1] 165\n\n\nSo, in summary, if you have missing observations in your data, make sure to use na.rm = TRUE.\n\n\nRounding numbers\nR can be very helpful in rounding numbers for us.\nThis is easily done using the round() function.\nThis is very important, not least because in some of your assignments you will be asked to round numbers to an “appropriate number of decimal places”.\nHere’s an example of how we can round a number in R to a specific number of decimal places.\nWe simply use the round() function:\n\nround(35.684, 1)\n\n[1] 35.7\n\n\nThe “1” in the above tells R to round the number to 1 decimal place.\nIf you needed to, for example, measure something to a precision of 0.01μg/mL, this would represent 2 decimal places:\n\nround(35.684, 2)\n\n[1] 35.68\n\n\n\n\nGenerating random numbers\nWe generated specific sequences earlier, and repeated numbers. But R can also generate (simulate) random data. You will come to learn that this is key for statistics.\nWe can use the rnorm() function to generate data from a normal distribution.\nThe rnorm() function has three arguments: n, mean, and sd\n\nn = the number of observations you want to simulate\nmean = this is the mean value of the normal distribution you want to simulate from\nsd = this is the sd of the distribution\n\nLet’s simulate 30 numbers from a distribution with a mean of 5, and a SD of 1:\n\nrNum &lt;- rnorm(n = 30, mean = 5, sd = 1)\nrNum\n\n [1] 4.885282 3.382535 5.806261 5.300364 4.603637 4.980413 4.715304 5.781831\n [9] 5.208776 5.083052 4.429651 4.640564 4.272111 6.196673 4.363025 3.154656\n[17] 4.977649 3.706931 5.117325 7.009789 5.029483 4.224538 5.173045 6.003908\n[25] 4.645957 5.002712 5.904087 6.164993 5.342933 6.518420\n\n\nRemember, this is a random number generator, so these 30 numbers may not have an exact mean of 5 and a standard deviation of 1. Let’s have a look:\n\nmean(rNum)\n\n[1] 5.054197\n\nsd(rNum)\n\n[1] 0.880788\n\n\n\n\n\n\n\n\nHave a go\n\n\n\n\n\nNow you have a go.\nCreate an object called “rNum2” which simulates 100 numbers from a distribution with a mean of 5 and an sd of 1. Then, calculate the mean and sd of that object.\n\n\n\n\n\nInstalling new R packages\nWhen you first install R on your device, or use R online for the first time, it will contain lots of different functions that you can use. However, not everything is automatically installed.\nIf you want to install new things into R, you can! This is called installing packages.\nR packages are banks of functions.\nTo install a new package you need to use the install.packages() function, and make sure to write the name of the package in quotation marks.\nFor example, install the “maps” package:\n\ninstall.packages(\"maps\", repos = \"https://cloud.r-project.org/\")\n\nInstalling package into 'C:/Users/sbiwk/AppData/Local/R/win-library/4.5'\n(as 'lib' is unspecified)\n\n\npackage 'maps' successfully unpacked and MD5 sums checked\n\n\nWarning: cannot remove prior installation of package 'maps'\n\n\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\sbiwk\\AppData\\Local\\R\\win-library\\4.5\\00LOCK\\maps\\libs\\x64\\maps.dll to\nC:\\Users\\sbiwk\\AppData\\Local\\R\\win-library\\4.5\\maps\\libs\\x64\\maps.dll:\nPermission denied\n\n\nWarning: restored 'maps'\n\n\n\nThe downloaded binary packages are in\n    C:\\Users\\sbiwk\\AppData\\Local\\Temp\\Rtmpof3vpN\\downloaded_packages\n\n\nThen you must always run the library() function to open that package:\n\nlibrary(\"maps\")\n\nWarning: package 'maps' was built under R version 4.5.1\n\n\nNow we can use the map() function (which comes from the “maps” package):\n\nmap(\"world\")\n\n\n\n\n\n\n\n\nNOTE: We will explore more data visualisations like this one in the next script.\n\n\nCiting R\nWhenever we use R in a report or assignment we should cite it.\nTo get the R citation we just run citation()\n\ncitation()\n\nIf we want to cite a specific package we can do it like this:\n\ncitation(\"maps\")\n\n\n\n\nTasks\nWrite your own code to complete the following 6 tasks. NOTE: You will not be assessed on these tasks. They are just designed to encourage you to practice.\nNOTE: You aren’t expected to remember how to do all of these yet!\nHINT: Look back at earlier sections of your script to find the bits of code that you need, and adapt them (that’s the best way to work in R)\n\n\n\n\n\n\nTask 1\n\n\n\n\n\nCreate an object called “seq1” which consists of a sequence of numbers from 5 to 100, in intervals of 1\n\n\n\n\n\n\n\n\n\nTask 2\n\n\n\n\n\nCalculate the middle value of seq1\n\n\n\n\n\n\n\n\n\nTask 3\n\n\n\n\n\nWhat is the total value of this sequence of numbers?\n\n\n\n\n\n\n\n\n\nTask 4\n\n\n\n\n\nInstall and load the “car” package\n\n\n\n\n\n\n\n\n\nTask 5\n\n\n\n\n\nCopy and paste here the citation for the “car” package:\n\n\n\n\n\n\n\n\n\nTask 6\n\n\n\n\n\nFinally, create a random set of ten-thousand numbers from a normal distribution with a mean of 5 and a standard deviation of 2"
  }
]